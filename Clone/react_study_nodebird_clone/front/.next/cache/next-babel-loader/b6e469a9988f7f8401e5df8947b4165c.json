{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport post from './post'; // async action create (saga)\n// action creator\n// const changeNickname= (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n// changeNickname('boogicho');\n// (이전상태, 액션) => 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE: ', action);\n        return _objectSpread(_objectSpread({}, state), action.patload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/ijong-won/Desktop/code/Frontend_Practice/Clone/react_study_nodebird_clone/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","patload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC5B,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAzB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEJ;AACI,eAAOL,KAAP;AANR;AAQC,GAV2B;AAWhCJ,EAAAA,IAXgC;AAYhCC,EAAAA;AAZgC,CAAD,CAAnC;AAeA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\n\nimport user from './user';\nimport post from './post';\n\n\n\n\n\n// async action create (saga)\n\n\n// action creator\n// const changeNickname= (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n\n// changeNickname('boogicho');\n\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = combineReducers({\n    index : (state = {}, action) => {\n        switch(action.type){\n            case HYDRATE:\n                console.log('HYDRATE: ', action);\n                return { ...state, ...action.patload};\n          \n            default:\n                return state;\n            }\n        },\n    user,\n    post\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}