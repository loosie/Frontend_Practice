{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducer } from 'redux';\nimport user from './user';\nimport post from './post';\nconst initialState = {\n  user: {},\n  post: {}\n}; // async action create (saga)\n// action creator\n// const changeNickname= (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n// changeNickname('boogicho');\n// (이전상태, 액션) => 다음상태\n\nconst rootReducer = combineReducer({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE: ', action);\n        return _objectSpread(_objectSpread({}, state), action.patload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/ijong-won/Desktop/code/Frontend_Practice/Clone/react_study_nodebird_clone/front/reducers/index.js"],"names":["HYDRATE","combineReducer","user","post","initialState","rootReducer","index","state","action","type","console","log","patload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,cAAT,QAA+B,OAA/B;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAC,EADY;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB,C,CAWA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AACA,MAAME,WAAW,GAAGJ,cAAc,CAAC;AAC/BK,EAAAA,KAAK,EAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAChC,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAzB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEJ;AACI,eAAOL,KAAP;AANR;AAQC,GAV8B;AAW/BL,EAAAA,IAX+B;AAY/BC,EAAAA;AAZ+B,CAAD,CAAlC;AAeA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducer } from 'redux';\n\nimport user from './user';\nimport post from './post';\n\nconst initialState = {\n    user:{\n      \n    },\n    post: {\n      \n    }\n};\n\n\n\n// async action create (saga)\n\n\n// action creator\n// const changeNickname= (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n\n// changeNickname('boogicho');\n\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = combineReducer({\n    index : (state = {}, action) => {\n    switch(action.type){\n        case HYDRATE:\n            console.log('HYDRATE: ', action);\n            return { ...state, ...action.patload};\n      \n        default:\n            return state;\n        }\n    },\n    user,\n    post\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}